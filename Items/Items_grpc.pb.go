// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: github.com/hmartins98/Contracts/Items/Items.proto

package Items

import (
	context "context"
	CustomTypes "github.com/hmartins98/Contracts/CustomTypes"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemsContractClient is the client API for ItemsContract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsContractClient interface {
	CreateItems(ctx context.Context, in *Items, opts ...grpc.CallOption) (*CustomTypes.BOOL, error)
	ReadItems(ctx context.Context, in *ItemsId, opts ...grpc.CallOption) (*CustomTypes.BOOL, error)
	UpdateItems(ctx context.Context, in *Items, opts ...grpc.CallOption) (*CustomTypes.BOOL, error)
	DeleteItems(ctx context.Context, in *ItemsId, opts ...grpc.CallOption) (*CustomTypes.BOOL, error)
}

type itemsContractClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsContractClient(cc grpc.ClientConnInterface) ItemsContractClient {
	return &itemsContractClient{cc}
}

func (c *itemsContractClient) CreateItems(ctx context.Context, in *Items, opts ...grpc.CallOption) (*CustomTypes.BOOL, error) {
	out := new(CustomTypes.BOOL)
	err := c.cc.Invoke(ctx, "/ItemsPackage.ItemsContract/CreateItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsContractClient) ReadItems(ctx context.Context, in *ItemsId, opts ...grpc.CallOption) (*CustomTypes.BOOL, error) {
	out := new(CustomTypes.BOOL)
	err := c.cc.Invoke(ctx, "/ItemsPackage.ItemsContract/ReadItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsContractClient) UpdateItems(ctx context.Context, in *Items, opts ...grpc.CallOption) (*CustomTypes.BOOL, error) {
	out := new(CustomTypes.BOOL)
	err := c.cc.Invoke(ctx, "/ItemsPackage.ItemsContract/UpdateItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsContractClient) DeleteItems(ctx context.Context, in *ItemsId, opts ...grpc.CallOption) (*CustomTypes.BOOL, error) {
	out := new(CustomTypes.BOOL)
	err := c.cc.Invoke(ctx, "/ItemsPackage.ItemsContract/DeleteItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemsContractServer is the server API for ItemsContract service.
// All implementations must embed UnimplementedItemsContractServer
// for forward compatibility
type ItemsContractServer interface {
	CreateItems(context.Context, *Items) (*CustomTypes.BOOL, error)
	ReadItems(context.Context, *ItemsId) (*CustomTypes.BOOL, error)
	UpdateItems(context.Context, *Items) (*CustomTypes.BOOL, error)
	DeleteItems(context.Context, *ItemsId) (*CustomTypes.BOOL, error)
	mustEmbedUnimplementedItemsContractServer()
}

// UnimplementedItemsContractServer must be embedded to have forward compatible implementations.
type UnimplementedItemsContractServer struct {
}

func (UnimplementedItemsContractServer) CreateItems(context.Context, *Items) (*CustomTypes.BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItems not implemented")
}
func (UnimplementedItemsContractServer) ReadItems(context.Context, *ItemsId) (*CustomTypes.BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadItems not implemented")
}
func (UnimplementedItemsContractServer) UpdateItems(context.Context, *Items) (*CustomTypes.BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItems not implemented")
}
func (UnimplementedItemsContractServer) DeleteItems(context.Context, *ItemsId) (*CustomTypes.BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItems not implemented")
}
func (UnimplementedItemsContractServer) mustEmbedUnimplementedItemsContractServer() {}

// UnsafeItemsContractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsContractServer will
// result in compilation errors.
type UnsafeItemsContractServer interface {
	mustEmbedUnimplementedItemsContractServer()
}

func RegisterItemsContractServer(s grpc.ServiceRegistrar, srv ItemsContractServer) {
	s.RegisterService(&ItemsContract_ServiceDesc, srv)
}

func _ItemsContract_CreateItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Items)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsContractServer).CreateItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemsPackage.ItemsContract/CreateItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsContractServer).CreateItems(ctx, req.(*Items))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsContract_ReadItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsContractServer).ReadItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemsPackage.ItemsContract/ReadItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsContractServer).ReadItems(ctx, req.(*ItemsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsContract_UpdateItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Items)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsContractServer).UpdateItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemsPackage.ItemsContract/UpdateItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsContractServer).UpdateItems(ctx, req.(*Items))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsContract_DeleteItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsContractServer).DeleteItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemsPackage.ItemsContract/DeleteItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsContractServer).DeleteItems(ctx, req.(*ItemsId))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemsContract_ServiceDesc is the grpc.ServiceDesc for ItemsContract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemsContract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ItemsPackage.ItemsContract",
	HandlerType: (*ItemsContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItems",
			Handler:    _ItemsContract_CreateItems_Handler,
		},
		{
			MethodName: "ReadItems",
			Handler:    _ItemsContract_ReadItems_Handler,
		},
		{
			MethodName: "UpdateItems",
			Handler:    _ItemsContract_UpdateItems_Handler,
		},
		{
			MethodName: "DeleteItems",
			Handler:    _ItemsContract_DeleteItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/hmartins98/Contracts/Items/Items.proto",
}
