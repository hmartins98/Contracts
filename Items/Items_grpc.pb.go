// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: github.com/hmartins98/Contracts/Items/Items.proto

package Items

import (
	context "context"
	CustomTypes "github.com/hmartins98/Contracts/CustomTypes"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemsContractClient is the client API for ItemsContract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsContractClient interface {
	CreateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*CustomTypes.BOOL, error)
	ReadItem(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*CustomTypes.BOOL, error)
	UpdateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*CustomTypes.BOOL, error)
	DeleteItem(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*CustomTypes.BOOL, error)
}

type itemsContractClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsContractClient(cc grpc.ClientConnInterface) ItemsContractClient {
	return &itemsContractClient{cc}
}

func (c *itemsContractClient) CreateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*CustomTypes.BOOL, error) {
	out := new(CustomTypes.BOOL)
	err := c.cc.Invoke(ctx, "/ItemsPackage.ItemsContract/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsContractClient) ReadItem(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*CustomTypes.BOOL, error) {
	out := new(CustomTypes.BOOL)
	err := c.cc.Invoke(ctx, "/ItemsPackage.ItemsContract/ReadItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsContractClient) UpdateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*CustomTypes.BOOL, error) {
	out := new(CustomTypes.BOOL)
	err := c.cc.Invoke(ctx, "/ItemsPackage.ItemsContract/UpdateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsContractClient) DeleteItem(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*CustomTypes.BOOL, error) {
	out := new(CustomTypes.BOOL)
	err := c.cc.Invoke(ctx, "/ItemsPackage.ItemsContract/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemsContractServer is the server API for ItemsContract service.
// All implementations must embed UnimplementedItemsContractServer
// for forward compatibility
type ItemsContractServer interface {
	CreateItem(context.Context, *Item) (*CustomTypes.BOOL, error)
	ReadItem(context.Context, *ItemId) (*CustomTypes.BOOL, error)
	UpdateItem(context.Context, *Item) (*CustomTypes.BOOL, error)
	DeleteItem(context.Context, *ItemId) (*CustomTypes.BOOL, error)
	mustEmbedUnimplementedItemsContractServer()
}

// UnimplementedItemsContractServer must be embedded to have forward compatible implementations.
type UnimplementedItemsContractServer struct {
}

func (UnimplementedItemsContractServer) CreateItem(context.Context, *Item) (*CustomTypes.BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedItemsContractServer) ReadItem(context.Context, *ItemId) (*CustomTypes.BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadItem not implemented")
}
func (UnimplementedItemsContractServer) UpdateItem(context.Context, *Item) (*CustomTypes.BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedItemsContractServer) DeleteItem(context.Context, *ItemId) (*CustomTypes.BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedItemsContractServer) mustEmbedUnimplementedItemsContractServer() {}

// UnsafeItemsContractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsContractServer will
// result in compilation errors.
type UnsafeItemsContractServer interface {
	mustEmbedUnimplementedItemsContractServer()
}

func RegisterItemsContractServer(s grpc.ServiceRegistrar, srv ItemsContractServer) {
	s.RegisterService(&ItemsContract_ServiceDesc, srv)
}

func _ItemsContract_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsContractServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemsPackage.ItemsContract/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsContractServer).CreateItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsContract_ReadItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsContractServer).ReadItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemsPackage.ItemsContract/ReadItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsContractServer).ReadItem(ctx, req.(*ItemId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsContract_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsContractServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemsPackage.ItemsContract/UpdateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsContractServer).UpdateItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsContract_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsContractServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemsPackage.ItemsContract/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsContractServer).DeleteItem(ctx, req.(*ItemId))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemsContract_ServiceDesc is the grpc.ServiceDesc for ItemsContract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemsContract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ItemsPackage.ItemsContract",
	HandlerType: (*ItemsContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _ItemsContract_CreateItem_Handler,
		},
		{
			MethodName: "ReadItem",
			Handler:    _ItemsContract_ReadItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _ItemsContract_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ItemsContract_DeleteItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/hmartins98/Contracts/Items/Items.proto",
}
