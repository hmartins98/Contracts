// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: github.com/hmartins98/Contracts/Products/Products.proto

package Products

import (
	context "context"
	CustomTypes "github.com/hmartins98/Contracts/CustomTypes"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductsContractClient is the client API for ProductsContract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsContractClient interface {
	CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*CustomTypes.BOOL, error)
	ReadProduct(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (*CustomTypes.BOOL, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*CustomTypes.BOOL, error)
	DeleteProduct(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (*CustomTypes.BOOL, error)
}

type productsContractClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsContractClient(cc grpc.ClientConnInterface) ProductsContractClient {
	return &productsContractClient{cc}
}

func (c *productsContractClient) CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*CustomTypes.BOOL, error) {
	out := new(CustomTypes.BOOL)
	err := c.cc.Invoke(ctx, "/ProductsPackage.ProductsContract/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsContractClient) ReadProduct(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (*CustomTypes.BOOL, error) {
	out := new(CustomTypes.BOOL)
	err := c.cc.Invoke(ctx, "/ProductsPackage.ProductsContract/ReadProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsContractClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*CustomTypes.BOOL, error) {
	out := new(CustomTypes.BOOL)
	err := c.cc.Invoke(ctx, "/ProductsPackage.ProductsContract/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsContractClient) DeleteProduct(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (*CustomTypes.BOOL, error) {
	out := new(CustomTypes.BOOL)
	err := c.cc.Invoke(ctx, "/ProductsPackage.ProductsContract/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsContractServer is the server API for ProductsContract service.
// All implementations must embed UnimplementedProductsContractServer
// for forward compatibility
type ProductsContractServer interface {
	CreateProduct(context.Context, *Product) (*CustomTypes.BOOL, error)
	ReadProduct(context.Context, *ProductId) (*CustomTypes.BOOL, error)
	UpdateProduct(context.Context, *Product) (*CustomTypes.BOOL, error)
	DeleteProduct(context.Context, *ProductId) (*CustomTypes.BOOL, error)
	mustEmbedUnimplementedProductsContractServer()
}

// UnimplementedProductsContractServer must be embedded to have forward compatible implementations.
type UnimplementedProductsContractServer struct {
}

func (UnimplementedProductsContractServer) CreateProduct(context.Context, *Product) (*CustomTypes.BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductsContractServer) ReadProduct(context.Context, *ProductId) (*CustomTypes.BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProduct not implemented")
}
func (UnimplementedProductsContractServer) UpdateProduct(context.Context, *Product) (*CustomTypes.BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductsContractServer) DeleteProduct(context.Context, *ProductId) (*CustomTypes.BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductsContractServer) mustEmbedUnimplementedProductsContractServer() {}

// UnsafeProductsContractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsContractServer will
// result in compilation errors.
type UnsafeProductsContractServer interface {
	mustEmbedUnimplementedProductsContractServer()
}

func RegisterProductsContractServer(s grpc.ServiceRegistrar, srv ProductsContractServer) {
	s.RegisterService(&ProductsContract_ServiceDesc, srv)
}

func _ProductsContract_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsContractServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProductsPackage.ProductsContract/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsContractServer).CreateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsContract_ReadProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsContractServer).ReadProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProductsPackage.ProductsContract/ReadProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsContractServer).ReadProduct(ctx, req.(*ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsContract_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsContractServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProductsPackage.ProductsContract/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsContractServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsContract_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsContractServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProductsPackage.ProductsContract/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsContractServer).DeleteProduct(ctx, req.(*ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductsContract_ServiceDesc is the grpc.ServiceDesc for ProductsContract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductsContract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProductsPackage.ProductsContract",
	HandlerType: (*ProductsContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ProductsContract_CreateProduct_Handler,
		},
		{
			MethodName: "ReadProduct",
			Handler:    _ProductsContract_ReadProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductsContract_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductsContract_DeleteProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/hmartins98/Contracts/Products/Products.proto",
}
